{"ast":null,"code":"// тут записываем так называемые экшн криэйторы - т.е. JS функции, которые должны сгенерировать\n// и вернуть JS объект, который в свою очередь будет описывать ACTION - событие в экосистеме Redux\nimport * as ACT from './actions';\nexport function updateCatalogList(payload) {\n  return {\n    // это JS объект - и есть тот самый реальный Redux action\n    type: ACT.UPDATE_LIST,\n    payload\n  };\n}\nexport function fetchFailed() {\n  return {\n    type: ACT.FETCH_FAILED\n  };\n}\nexport function fetchSuccess() {\n  return {\n    type: ACT.FETCH_SUCCESS\n  };\n}\nexport function updateLoading(payload) {\n  return {\n    type: ACT.UPDATE_LOADING,\n    payload\n  };\n}\nexport function updateColor(payload) {\n  return {\n    type: ACT.UPDATE_COLOR,\n    payload\n  };\n}\nexport function updateBrand(payload) {\n  return {\n    type: ACT.UPDATE_BRAND,\n    payload\n  };\n}\nexport function updateCategory(payload) {\n  return {\n    type: ACT.UPDATE_CATEGORY,\n    payload\n  };\n}\nexport function updatePrice(payload) {\n  return {\n    type: ACT.UPDATE_PRICE,\n    payload\n  };\n}\nexport function updateFilterCategory(payload) {\n  return {\n    type: ACT.UPDATE_FILTER_CATEGORY,\n    payload\n  };\n}\nexport function updateFilterBrand(payload) {\n  return {\n    type: ACT.UPDATE_FILTER_BRAND,\n    payload\n  };\n}\nexport function updateFilterColor(payload) {\n  return {\n    type: ACT.UPDATE_FILTER_COLOR,\n    payload\n  };\n}\nexport function updateFilterPrice(payload) {\n  return {\n    type: ACT.UPDATE_FILTER_PRICE,\n    payload\n  };\n}\nexport function fetchData(searchText) {\n  return dispatcher => {\n    dispatcher(updateLoading(true)); // установить индикатор загрузки данных в ТРУ - включить спинер\n\n    const data = fetch('http://test-api.ipromote.ru/API/CATALOG/FIND');\n    data.then(response => {\n      return response.json();\n    }).then(localData => {\n      // this.setState({movieList: data}); - остатки от вызова в классе (когда фетчинг данных из класса)\n      dispatcher(updateCatalogList(localData.data)); // записать в ридакс стор список фильмов\n\n      dispatcher(fetchSuccess()); // установить статус состояния загрузки - УСПЕШНО загружены данные\n    }).catch(e => {\n      dispatcher(fetchFailed()); // установить статус состояния загрузки - ПРОВАЛ данные НЕ удалось загрузить\n\n      console.log('Sabotage: data fetch ERROR.', e);\n    }).finally(() => {\n      dispatcher(updateLoading(false)); // установить индикатор загрузки данных в FALSE (выключить спинер)\n    });\n  };\n}\nexport function fetchFilterData() {\n  return dispatcher => {\n    dispatcher(updateLoading(true)); // установить индикатор загрузки данных в ТРУ - включить спинер\n\n    const categoryData = fetch('http://test-api.ipromote.ru/API/CATEGORY/FIND');\n    const colorData = fetch('http://test-api.ipromote.ru/API/COLOR/FIND');\n    const brandData = fetch('http://test-api.ipromote.ru/API/BRAND/FIND');\n    const priceData = fetch('http://test-api.ipromote.ru/API/CATALOG/RANGE');\n    const allResponse = Promise.all([categoryData, colorData, brandData, priceData]);\n    allResponse.then(responseArr => {\n      console.log('responseArr ->', responseArr);\n      return Promise.all([responseArr[0].json(), responseArr[1].json(), responseArr[2].json(), responseArr[3].json()]);\n    }).then(dataArr => {\n      dispatcher(updateColor(dataArr[1].data));\n      dispatcher(updateBrand(dataArr[2].data));\n      dispatcher(updateCategory(dataArr[0].data));\n      dispatcher(updatePrice(dataArr[3].data));\n    }).catch(error => {\n      console.log(\"ERROR ->\", error);\n    }).finally(() => {\n      dispatcher(updateLoading(false));\n    }); // data.then(response => {\n    //   return response.json();\n    // }).then(localData => {\n    //   // this.setState({movieList: data}); - остатки от вызова в классе (когда фетчинг данных из класса)\n    //   dispatcher(updateCatalogList(localData.data)); // записать в ридакс стор список фильмов\n    //   dispatcher(fetchSuccess()); // установить статус состояния загрузки - УСПЕШНО загружены данные\n    // }).catch((e) => {\n    //   dispatcher(fetchFailed()); // установить статус состояния загрузки - ПРОВАЛ данные НЕ удалось загрузить\n    //   console.log('Sabotage: data fetch ERROR.', e);\n    // }).finally(() => {\n    //   dispatcher(updateLoading(false)); // установить индикатор загрузки данных в FALSE (выключить спинер)\n    // });\n  };\n}","map":{"version":3,"sources":["/Users/dmitrijkotelevic/dev/wd7_fe_project/src/store/action_creatores.js"],"names":["ACT","updateCatalogList","payload","type","UPDATE_LIST","fetchFailed","FETCH_FAILED","fetchSuccess","FETCH_SUCCESS","updateLoading","UPDATE_LOADING","updateColor","UPDATE_COLOR","updateBrand","UPDATE_BRAND","updateCategory","UPDATE_CATEGORY","updatePrice","UPDATE_PRICE","updateFilterCategory","UPDATE_FILTER_CATEGORY","updateFilterBrand","UPDATE_FILTER_BRAND","updateFilterColor","UPDATE_FILTER_COLOR","updateFilterPrice","UPDATE_FILTER_PRICE","fetchData","searchText","dispatcher","data","fetch","then","response","json","localData","catch","e","console","log","finally","fetchFilterData","categoryData","colorData","brandData","priceData","allResponse","Promise","all","responseArr","dataArr","error"],"mappings":"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","sourcesContent":["// тут записываем так называемые экшн криэйторы - т.е. JS функции, которые должны сгенерировать\n// и вернуть JS объект, который в свою очередь будет описывать ACTION - событие в экосистеме Redux\nimport * as ACT from './actions';\n\nexport function updateCatalogList(payload) {\n  return { // это JS объект - и есть тот самый реальный Redux action\n    type: ACT.UPDATE_LIST,\n    payload,\n  };\n}\n\nexport function fetchFailed() {\n  return {\n    type: ACT.FETCH_FAILED,\n  }\n}\n\nexport function fetchSuccess() {\n  return {\n    type: ACT.FETCH_SUCCESS,\n  }\n}\n\nexport function updateLoading(payload) {\n  return {\n    type: ACT.UPDATE_LOADING,\n    payload,\n  }\n}\n\nexport function updateColor(payload) {\n  return {\n    type: ACT.UPDATE_COLOR,\n    payload,\n  }\n}\n\nexport function updateBrand(payload) {\n  return {\n    type: ACT.UPDATE_BRAND,\n    payload,\n  }\n}\n\nexport function updateCategory(payload) {\n  return {\n    type: ACT.UPDATE_CATEGORY,\n    payload,\n  }\n}\n\nexport function updatePrice(payload) {\n    return {\n      type: ACT.UPDATE_PRICE,\n      payload,\n    }\n}\n\n\n\nexport function updateFilterCategory(payload) {\n    return {\n      type: ACT.UPDATE_FILTER_CATEGORY,\n      payload,\n    }\n}\n\nexport function updateFilterBrand(payload) {\n    return {\n      type: ACT.UPDATE_FILTER_BRAND,\n      payload,\n    }\n}\n\nexport function updateFilterColor(payload) {\n    return {\n      type: ACT.UPDATE_FILTER_COLOR,\n      payload,\n    }\n}\n\nexport function updateFilterPrice(payload) {\n    return {\n      type: ACT.UPDATE_FILTER_PRICE,\n      payload,\n    }\n}\n\nexport function fetchData(searchText) {\n\n  return (dispatcher) => {\n\n    dispatcher(updateLoading(true)); // установить индикатор загрузки данных в ТРУ - включить спинер\n    const data = fetch('http://test-api.ipromote.ru/API/CATALOG/FIND');\n\n    data.then(response => {\n      return response.json();\n    }).then(localData => {\n      // this.setState({movieList: data}); - остатки от вызова в классе (когда фетчинг данных из класса)\n      dispatcher(updateCatalogList(localData.data)); // записать в ридакс стор список фильмов\n\n      dispatcher(fetchSuccess()); // установить статус состояния загрузки - УСПЕШНО загружены данные\n    }).catch((e) => {\n\n      dispatcher(fetchFailed()); // установить статус состояния загрузки - ПРОВАЛ данные НЕ удалось загрузить\n\n      console.log('Sabotage: data fetch ERROR.', e);\n    }).finally(() => {\n\n      dispatcher(updateLoading(false)); // установить индикатор загрузки данных в FALSE (выключить спинер)\n\n    });\n\n  }\n}\n\nexport function fetchFilterData() {\n\n  return (dispatcher) => {\n\n    dispatcher(updateLoading(true)); // установить индикатор загрузки данных в ТРУ - включить спинер\n    const categoryData = fetch('http://test-api.ipromote.ru/API/CATEGORY/FIND');\n    const colorData = fetch('http://test-api.ipromote.ru/API/COLOR/FIND');\n    const brandData = fetch('http://test-api.ipromote.ru/API/BRAND/FIND');\n    const priceData = fetch('http://test-api.ipromote.ru/API/CATALOG/RANGE')\n\n    const allResponse = Promise.all([categoryData,colorData,brandData,priceData]);\n\n    allResponse.then (\n        (responseArr) => {\n          console.log('responseArr ->', responseArr);\n          return Promise.all([\n            responseArr[0].json(),\n            responseArr[1].json(),\n            responseArr[2].json(),\n            responseArr[3].json(),\n          ]);\n        }\n    ).then (\n        (dataArr) => {\n          dispatcher(updateColor(dataArr[1].data));\n          dispatcher(updateBrand(dataArr[2].data));\n          dispatcher(updateCategory(dataArr[0].data));\n          dispatcher(updatePrice(dataArr[3].data));\n        }\n    ).catch(\n        (error) => {\n          console.log (\"ERROR ->\", error)\n        }\n    ).finally(\n        () => {\n          dispatcher(updateLoading(false))\n        }\n    );\n\n    // data.then(response => {\n    //   return response.json();\n    // }).then(localData => {\n    //   // this.setState({movieList: data}); - остатки от вызова в классе (когда фетчинг данных из класса)\n    //   dispatcher(updateCatalogList(localData.data)); // записать в ридакс стор список фильмов\n\n    //   dispatcher(fetchSuccess()); // установить статус состояния загрузки - УСПЕШНО загружены данные\n    // }).catch((e) => {\n\n    //   dispatcher(fetchFailed()); // установить статус состояния загрузки - ПРОВАЛ данные НЕ удалось загрузить\n\n    //   console.log('Sabotage: data fetch ERROR.', e);\n    // }).finally(() => {\n\n    //   dispatcher(updateLoading(false)); // установить индикатор загрузки данных в FALSE (выключить спинер)\n\n    // });\n\n  }\n}"]},"metadata":{},"sourceType":"module"}