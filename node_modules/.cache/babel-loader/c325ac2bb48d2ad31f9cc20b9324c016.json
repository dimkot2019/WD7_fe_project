{"ast":null,"code":"import { combineReducers } from \"redux\";\nimport * as ACT from './actions';\nconst initialStore = {\n  catalogList: [],\n  isLoading: false,\n  fetchStatus: null,\n  categoryList: [],\n  colorList: [],\n  brandList: [],\n  priceRange: [],\n  filter: {\n    category\n  }\n};\n\nfunction rootReducer(store = initialStore, action) {\n  switch (action.type) {\n    case ACT.UPDATE_LIST:\n      // случилось событие - обновить список фильмов\n      return { ...store,\n        catalogList: action.payload\n      };\n\n    case ACT.UPDATE_LOADING:\n      // случилось событие - обновить индикатор загрузки данных с сервера\n      return { ...store,\n        isLoading: action.payload\n      };\n\n    case ACT.UPDATE_COLOR:\n      // случилось событие - обновить индикатор загрузки данных с сервера\n      return { ...store,\n        colorList: action.payload\n      };\n\n    case ACT.UPDATE_CATEGORY:\n      // случилось событие - обновить индикатор загрузки данных с сервера\n      return { ...store,\n        categoryList: action.payload\n      };\n\n    case ACT.UPDATE_PRICE:\n      // случилось событие - обновить индикатор загрузки данных с сервера\n      return { ...store,\n        priceRange: action.payload\n      };\n\n    case ACT.UPDATE_BRAND:\n      // случилось событие - обновить индикатор загрузки данных с сервера\n      return { ...store,\n        brandList: action.payload\n      };\n\n    case ACT.FETCH_SUCCESS: // случилось событие - обновить статус загрузки - УСПЕХ\n\n    case ACT.FETCH_FAILED:\n      // случилось событие - обновить статус загрузки - ПРОВАЛ\n      return { ...store,\n        fetchStatus: action.payload\n      };\n  }\n\n  return store;\n}\n\nexport default (() => combineReducers({\n  app: rootReducer\n}));","map":{"version":3,"sources":["/Users/dmitrijkotelevic/dev/wd7_fe_project/src/store/reducer.js"],"names":["combineReducers","ACT","initialStore","catalogList","isLoading","fetchStatus","categoryList","colorList","brandList","priceRange","filter","category","rootReducer","store","action","type","UPDATE_LIST","payload","UPDATE_LOADING","UPDATE_COLOR","UPDATE_CATEGORY","UPDATE_PRICE","UPDATE_BRAND","FETCH_SUCCESS","FETCH_FAILED","app"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,OAAO,KAAKC,GAAZ,MAAqB,WAArB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,WAAW,EAAE,EADM;AAEnBC,EAAAA,SAAS,EAAE,KAFQ;AAGnBC,EAAAA,WAAW,EAAE,IAHM;AAInBC,EAAAA,YAAY,EAAE,EAJK;AAKnBC,EAAAA,SAAS,EAAE,EALQ;AAMnBC,EAAAA,SAAS,EAAE,EANQ;AAOnBC,EAAAA,UAAU,EAAE,EAPO;AAQnBC,EAAAA,MAAM,EAAE;AACJC,IAAAA;AADI;AARW,CAArB;;AAcA,SAASC,WAAT,CAAqBC,KAAK,GAAGX,YAA7B,EAA2CY,MAA3C,EAAmD;AAEjD,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKd,GAAG,CAACe,WAAT;AAAsB;AACpB,aAAO,EACL,GAAGH,KADE;AAELV,QAAAA,WAAW,EAAEW,MAAM,CAACG;AAFf,OAAP;;AAKF,SAAKhB,GAAG,CAACiB,cAAT;AAAyB;AACvB,aAAO,EACL,GAAGL,KADE;AAELT,QAAAA,SAAS,EAAEU,MAAM,CAACG;AAFb,OAAP;;AAKF,SAAKhB,GAAG,CAACkB,YAAT;AAAuB;AACrB,aAAO,EACL,GAAGN,KADE;AAELN,QAAAA,SAAS,EAAEO,MAAM,CAACG;AAFb,OAAP;;AAKF,SAAKhB,GAAG,CAACmB,eAAT;AAA0B;AACxB,aAAO,EACL,GAAGP,KADE;AAELP,QAAAA,YAAY,EAAEQ,MAAM,CAACG;AAFhB,OAAP;;AAKF,SAAKhB,GAAG,CAACoB,YAAT;AAAuB;AACrB,aAAO,EACL,GAAGR,KADE;AAELJ,QAAAA,UAAU,EAAEK,MAAM,CAACG;AAFd,OAAP;;AAKF,SAAKhB,GAAG,CAACqB,YAAT;AAAuB;AACrB,aAAO,EACL,GAAGT,KADE;AAELL,QAAAA,SAAS,EAAEM,MAAM,CAACG;AAFb,OAAP;;AAKF,SAAKhB,GAAG,CAACsB,aAAT,CAtCF,CAsC0B;;AACxB,SAAKtB,GAAG,CAACuB,YAAT;AAAuB;AACrB,aAAO,EACL,GAAGX,KADE;AAELR,QAAAA,WAAW,EAAES,MAAM,CAACG;AAFf,OAAP;AAxCJ;;AAgDA,SAAOJ,KAAP;AACD;;AAED,gBAAe,MAAMb,eAAe,CAAC;AACnCyB,EAAAA,GAAG,EAAEb;AAD8B,CAAD,CAApC","sourcesContent":["import { combineReducers } from \"redux\";\nimport * as ACT from './actions';\n\nconst initialStore = {\n  catalogList: [],\n  isLoading: false,\n  fetchStatus: null,\n  categoryList: [],\n  colorList: [],\n  brandList: [],\n  priceRange: [],\n  filter: {\n      category\n\n  }\n};\n\nfunction rootReducer(store = initialStore, action) {\n\n  switch (action.type) {\n\n    case ACT.UPDATE_LIST: // случилось событие - обновить список фильмов\n      return {\n        ...store,\n        catalogList: action.payload,\n      }\n\n    case ACT.UPDATE_LOADING: // случилось событие - обновить индикатор загрузки данных с сервера\n      return {\n        ...store,\n        isLoading: action.payload,\n      }\n\n    case ACT.UPDATE_COLOR: // случилось событие - обновить индикатор загрузки данных с сервера\n      return {\n        ...store,\n        colorList: action.payload,\n      }\n\n    case ACT.UPDATE_CATEGORY: // случилось событие - обновить индикатор загрузки данных с сервера\n      return {\n        ...store,\n        categoryList: action.payload,\n      }\n\n    case ACT.UPDATE_PRICE: // случилось событие - обновить индикатор загрузки данных с сервера\n      return {\n        ...store,\n        priceRange: action.payload,\n      }\n\n    case ACT.UPDATE_BRAND: // случилось событие - обновить индикатор загрузки данных с сервера\n      return {\n        ...store,\n        brandList: action.payload,\n      }\n\n    case ACT.FETCH_SUCCESS: // случилось событие - обновить статус загрузки - УСПЕХ\n    case ACT.FETCH_FAILED: // случилось событие - обновить статус загрузки - ПРОВАЛ\n      return {\n        ...store,\n        fetchStatus: action.payload,\n      }\n\n\n  }\n\n  return store;\n}\n\nexport default () => combineReducers({\n  app: rootReducer,\n})\n"]},"metadata":{},"sourceType":"module"}